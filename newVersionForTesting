from os import truncate
import playingCard
import random
import copy
from ConsoleInput import ConsoleInput

consoleInput = ConsoleInput()

def setConsoleInput(userInput):
    consoleInput = userInput

def initGameState():

    initGameState = {
        "rulesFilename": "Gamerules.txt",
        "playerNumber": 0,
        "gameRound": 0,
        "deck": [],
        "hands": [],
        "plays": [],
        "stock": [],
        "score": [],
        "scoreToWin": 1000,
        "numberOfPlayers": 4
    }
    gameState = copy.deepcopy(initGameState)
    return(gameState)



def initListOfPlays():
    initListOfPlays = {
        "playerHand": [],
        "playsFound": [],
        "newPlaysFound": [],
        "playsMadeSoFar": [],
        "bestScoreSoFar": 0
    }
    listOfPlays = copy.deepcopy(initListOfPlays)
    return(listOfPlays)





def askYorN(questionString):
    validResponse = False
    while (not validResponse):
        questionResponse = input(questionString)
        if ((len(questionResponse) == 1) and (questionResponse.lower() in "yn")):
           validResponse = True
        else:
            print("Please enter 'y' or 'n'")
    return(questionResponse.lower() == "y")



def setupNewDeck():
    newDeck = playingCard.generateDeck()
    newDeck = playingCard.shuffleCards(newDeck)
    return(newDeck)



def getCardFromDeck(gameState):
    # have we exhauseted the deck?
    # if so, turn over the stock pile and shuffle
    if (gameState["deck"] == []):
        lenOfStock = len(gameState["stock"])
        if (lenOfStock == 1):
            print("Deck is empty. Only the stock card remains!")
            print("Drawing stock card!")
            topCard = playingCard.dealACard(gameState["stock"])
        else:
            gameState["deck"] = gameState["stock"][0:lenOfStock - 2]
            gameState["stock"] = [gameState["stock"][lenOfStock - 1]]
            playingCard.shuffleCards(gameState["deck"])
            topCard = playingCard.dealACard(gameState["deck"])
    else:
        topCard = playingCard.dealACard(gameState["deck"])
    return(topCard)



def displayRules(rulesFilename):
    try:
        with open(rulesFilename, "r") as f:
            emailTemplate = f.read()
    except OSError as err:
        print("Hmmm: something went wrong:")
        print("OS error: {0}".format(err))
        print("Unable to open the game rules file...")
        emailTemplate = ""
    return emailTemplate



def getNumberFromPlayer(inputText, min = -1, max = -1, defaultValue = -1):
    isNotValidInput = True

    while (isNotValidInput):
        isAboveMin = True
        isBelowMax = True

        playerChoice = input(inputText)
        
        if (defaultValue != -1):
            if (playerChoice == ""):
                playerChoice = str(defaultValue)

        if (playerChoice.isdigit()):
            playerChoice = int(playerChoice)

            rangeInfo = ""
            if (min != -1):
                rangeInfo = ", minimum; " + str(min)
            if (max != -1):
                rangeInfo += ", maximum; " + str(max)

            if ((playerChoice < min) and (min != -1)):
                isAboveMin = False
            if ((playerChoice > max) and (min != -1)):
                isBelowMax = False

            if (isAboveMin and isBelowMax):
                isNotValidInput = False
            else:
                print("Sorry, you need to enter a number" + rangeInfo)

    return(playerChoice)






def welcomeThePlayer(rulesFilename):
    print("\nWelcome to Rummy!\n\n")
    if askYorN("Would you like to see the instructions? (y or n): "):
        print(displayRules(rulesFilename))



def askPlayerForPrefs(gameState):
    print("If you want, you can just press enter to accept the default answers (shown in brackets) to the following questions.")

    playerChoice = getNumberFromPlayer("Please enter the target score to win (1000): ", 10, 100000, 1000)
    gameState["scoreToWin"] = playerChoice

    playerChoice = getNumberFromPlayer("Please enter the number of players (4):", 2, 5, 4)
    gameState["numberOfPlayers"] = playerChoice
    
    return(gameState)




def getPlayerChoices(gameState):
    welcomeThePlayer(gameState["rulesFilename"])
    gameState = askPlayerForPrefs(gameState)
    return(gameState)



def determinePlayingOrder(gameState):
    playerNum = random.randint(0, gameState["numberOfPlayers"] - 1)
    print("You are player number " + str(playerNum + 1))
    gameState["playerNumber"] = playerNum
    return(gameState)



def initiateEnvironment(gameState):
    for i in range(gameState["numberOfPlayers"]):
        gameState["plays"].append([])
    return(gameState)



def dealTheHands(gameState):
    if (gameState["numberOfPlayers"] < 5):
        cardsPerHand = 10
    else:
        cardsPerHand = 6
    gameState["hands"] = playingCard.dealCards(gameState["deck"], cardsPerHand, gameState["numberOfPlayers"])
    playingCard.sortHands(gameState["hands"])
    return(gameState)








def displayStock(gameState):
    topCard = gameState["stock"][len(gameState["stock"]) - 1]
    print("The top card on the stock pile is:", topCard)



def initiateTheStock(gameState):
    gameState["stock"].append(playingCard.dealACard(gameState["deck"]))
    displayStock(gameState)
    return(gameState)


    
def displayComputerPosition(computerHand, gameState):
    print("Player", computerHand + 1, "has", len(gameState["hands"][computerHand]), "cards left in their hand.")
    if (len(gameState["plays"][computerHand]) > 0):
        print("They have played the following:", gameState["plays"][computerHand])



def displayPlayerPosition(gameState):
    playerHand = gameState["playerNumber"]
    print("You are player", playerHand+1)
    print("You have the following cards in your hand:", gameState["hands"][playerHand])
    if (len(gameState["plays"][playerHand]) > 0):
        print("You have played the following:")
        for plays in gameState["plays"][playerHand]:
            playingCard.convertNumbersToFaces(plays)
            print(plays)
            playingCard.convertFacesToNumbers(plays)






def displayInitialPosition(gameState):
    print("Under construction")

    displayStock(gameState)

    for handToDisplay in range(gameState["numberOfPlayers"]):
        if handToDisplay == gameState["playerNumber"]:
            displayPlayerPosition(gameState)
        else:
            displayComputerPosition(handToDisplay, gameState)







def setupNewGame(gameState):
    gameState["deck"] = setupNewDeck()
    gameState = getPlayerChoices(gameState)
    gameState = determinePlayingOrder(gameState)
    gameState = initiateEnvironment(gameState)
    gameState = dealTheHands(gameState)
    gameState = initiateTheStock(gameState)
    displayInitialPosition(gameState)
    print(gameState)
    return(gameState)








# set up the listOfPlays structure at the start of the evaluation
def setupListOfPlays(gameState, currentPlayer):
    listOfPlays = initListOfPlays()
    listOfPlays["playsFound"] = copy.deepcopy(gameState["plays"][currentPlayer])
    listOfPlays["playerHand"] = copy.deepcopy(gameState["hands"][currentPlayer])

    return(listOfPlays)







