- use the rules from https://www.dummies.com/games/card-games/gin-rummy/rummy-understanding-the-rules-and-starting-a-game/


- offer to display instructions


- maybe give the player a set of choices at the start of the game e.g. target score, number of players etc


- player 1 goes first - you are assigned a player number at random, so if you are player 2 - you go second


- each computer player 'plays' by displayng a line or lines;
Player 1 picks up a card from the stock and discards 5H
Player 1 plays set; 7H 7D 7C
Player 1 melds; adds 7S to 8S 9S 10S
Player 1 melds; adds JS to 7S 8S 9S 10S


- on player turn they are shown their status

- full display status is as follows:
    - the top card on the stock is:...
    - player x has n cards left in their hand. They have played the following sets:...
    - your hand contains the following cards:...
    - you have played the following sets:...





- player can choose from gameplay options, end turn or game, display status for another player (how many cards the player has left and what sets they have in front of them)

- gameplay options include discard, play set, meld card

- choosing a gameplay option lets the player choose from their possible legal plays for that option





- for computer turn, create an empty list of plays and the score of these plays, then identify and create a list of the possible legal plays - if there are no possible plays then return form the funtion with the list and score
- iterate through the list; - add the next play to the list and the score for that sequence of plays, and recurse into the function again - on return compare the sequence and score with the higest-so-far and keep the highest etc


- for the computer play the decision also needs to be made whether to take the top stock card frm the discard pile or an unknown card from the stock.
    - to achieve this we will have 2 evaluation branches 
        - branch 1 evaluates and scores with the help of the known top stock card from the discard pile
        - branch 2 evaluates and scores with the help of a stock card, but a weighting of +1 is added to the result, so that it wins if the known top stock card doesn't help
        - if branch 1 wins then we go ahead and make those plays 
        - if branch 2 wins then we draw the top stock card and perform another round of evaluation and scoring, including the new card, and we make the highest scoring play




- the evaluate and score algorithm will work as follows;
    - make a list of all possible plays that can be made with the hand and the existing sets
    - step through the list of plays, and recursively call the evaluation routine again, passing the remaining hand and with the play added to a 'proposed play' list
    - when there are no plays left, add up the score (with weightings), and return() - the returned play and score is compared to the best-so-far, and the lowest score and play is discarded etc

- during evaluation, add a large weighting to any play which leaves the player with 1 or 0 cards left in their hand, as this wins the current game.



- for evaluation we need to identify cards which can be put together into sets, and cards which can be 'melded' into existing sets
    - cards are sorted and converted into numbers using convert faces to numbers
    - need a subroutine to identify all possible sets and merges that can be played from a hand
        - it creates an array of possible plays, along with the resulting sets and remaining hands (and also passes plays from previous recursion rounds) - each of these datasets are passed back into the function recursively.
        - when there are no possible plays left on that branch, the score is evaluated and the whole lot is returned back down the tree.
        - as each dataset is returned, the function compares the score in the returning dataset with the score of the best dataset so far (candidate). if the returning dataset score is higher then it becomes the new candidate.

-to create an array of possible plays
    - first look for groups of 3 that can be made into a hand, then look for 4s, 5s etc stopping when sets of that length can't be found.
    - next look for single card plays that can be 'melded' into the 'resulting sets' array
    





- game ends when a player has no cards left in their hand

- when totting up the scores at the end of a game, display itemised scoring for each player set and for the remaining cards in their hand



